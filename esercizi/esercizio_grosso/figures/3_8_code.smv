MODULE main
VAR
	wantp : boolean;
	wantq : boolean;
	p : process proc(wantp, wantq);
	q : process proc(wantq, wantp);
ASSIGN
	init(wantp) := FALSE; 
	init(wantq) := FALSE; 

SPEC AG !(( p.state = s4 ) & (q.state = s4 ))
SPEC AG (( p.state = s2 ) -> (AF p.state = s4 ))
SPEC AG EF (( p.state = s1 )| ( q.state = s1 ))

LTLSPEC G !(p.state = s4 & q.state = s4)
LTLSPEC G (p.state = s2 -> F(p.state = s4))
LTLSPEC G F (( p.state = s1) | ( q.state = s1 ) )

MODULE proc(want_me, want_other)
VAR
	state : {s1, s2, s3, s4, s5};
ASSIGN
	init(state) := s1;
	next(state) := 
	  case
		state = s1 : {s2, s1};
		state = s2 : s3;
		state = s3 & !want_other: s4;
		state = s4 : s5;
		state = s5 : s1;
		TRUE : state;
	  esac;	
	next(want_me) := 
	  case
		state = s2 : TRUE;
		state = s5 : FALSE;
	 	TRUE : want_me;
	  esac;
